// Code generated by go-enum
// DO NOT EDIT!

package main

import (
	"fmt"
	"strings"
)

const (
	// SizeByte is a Size of type Byte.
	SizeByte Size = iota
	// SizeKiloByte is a Size of type KiloByte.
	SizeKiloByte
	// SizeMegaByte is a Size of type MegaByte.
	SizeMegaByte
	// SizeGigaByte is a Size of type GigaByte.
	SizeGigaByte
	// SizeTeraByte is a Size of type TeraByte.
	SizeTeraByte
)

const _SizeName = "ByteKiloByteMegaByteGigaByteTeraByte"

var _SizeNames = []string{
	_SizeName[0:4],
	_SizeName[4:12],
	_SizeName[12:20],
	_SizeName[20:28],
	_SizeName[28:36],
}

// SizeNames returns a list of possible string values of Size.
func SizeNames() []string {
	tmp := make([]string, len(_SizeNames))
	copy(tmp, _SizeNames)
	return tmp
}

var _SizeMap = map[Size]string{
	0: _SizeName[0:4],
	1: _SizeName[4:12],
	2: _SizeName[12:20],
	3: _SizeName[20:28],
	4: _SizeName[28:36],
}

// String implements the Stringer interface.
func (x Size) String() string {
	if str, ok := _SizeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Size(%d)", x)
}

var _SizeValue = map[string]Size{
	_SizeName[0:4]:   0,
	_SizeName[4:12]:  1,
	_SizeName[12:20]: 2,
	_SizeName[20:28]: 3,
	_SizeName[28:36]: 4,
}

// ParseSize attempts to convert a string to a Size
func ParseSize(name string) (Size, error) {
	if x, ok := _SizeValue[name]; ok {
		return x, nil
	}
	return Size(0), fmt.Errorf("%s is not a valid Size, try [%s]", name, strings.Join(_SizeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x Size) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Size) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSize(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
