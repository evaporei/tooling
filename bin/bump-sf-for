#!/usr/bin/env bash

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

SF_FOR=
SF_FOR_PRIV=

build=""
dry_run=""
force_build=""
checkout_corresponding_branch=""
current_dir="`pwd`"

building=""

teardown() {
  for job in `jobs -p`; do
    kill -s TERM $job &> /dev/null || true
  done
}

main() {
  trap teardown EXIT
  pushd "$ROOT" &> /dev/null

  while getopts "hcnbf" opt; do
    case $opt in
      h) usage && exit 0;;
      c) checkout_corresponding_branch="true";;
      n) dry_run="true";;
      b) build="true";;
      f) force_build="true";;
      \?) usage_error "Invalid option: -$OPTARG";;
    esac
  done
  shift $((OPTIND-1))

  chain="$1";
  if [[ $chain != "eosio" && $chain != "ethereum" && $chain != "solana" ]]; then
    usage_error "The <chain> value must be one of 'eosio', 'ethereum', 'solana' got $1"
  fi
  shift;

  component="$1";
  if [[ $component != "" ]]; then
    shift
  fi

  SF_FOR="$SF_REPOSITORY_DIR/sf-$chain"
  if [[ ! -d "$SF_FOR" ]]; then
    usage_error "Directory '$SF_FOR' does not exist, have you correctly specified \$SF_REPOSITORY_DIR environment variable?"
  fi

  SF_FOR_PRIV="$SF_REPOSITORY_DIR/sf-$chain-priv"
  if [[ ! -d "$SF_FOR" ]]; then
    usage_error "Directory '$SF_FOR_PRIV' does not exist, have you correctly specified \$SF_REPOSITORY_DIR environment variable?"
  fi

  if [[ ! -d "$SF_WORKFLOWS_DIR" ]]; then
    usage_error "Directory '$SF_WORKFLOWS_DIR' does not exist, have you correctly specified \$SF_WORKFLOWS_DIR environment variable?"
  fi

  sf_for_branch=`repository_branch $SF_FOR`
  sf_for_priv_branch=`repository_branch $SF_FOR_PRIV`

  if [[ "$component" != "" ]]; then
    bump_dep $SF_FOR $component $sf_for_branch
    if [[ ($? == 0 && $build == "true") || $force_build == "true" ]]; then
      build_component "sf-$chain" "$sf_for_branch"
    fi
  elif [[ $force_build == "true" ]]; then
    build_component "sf-$chain" "$sf_for_branch"
  fi

  if [[ "$checkout_corresponding_branch" == "true" &&
        "$sf_for_branch" != "develop" &&
        "$sf_for_branch" != "master" &&
        "$sf_for_branch" != "$sf_for_priv_branch"
     ]]; then
    checkout_branch "$SF_FOR_PRIV" "$sf_for_branch"
    sf_for_priv_branch="$sf_for_branch"
  fi

  bump_dep $SF_FOR_PRIV "sf-$chain@$sf_for_branch" "$sf_for_priv_branch"
  if [[ ($? == 0 && $build == "true") || $force_build == "true" ]]; then
    build_component "sf-$chain-priv" "$sf_for_priv_branch"
  fi

  if [[ "$building" != "" ]]; then
    echo ""
    echo "Press Ctrl+C to terminate all builds"
    for job in `jobs -p`; do
      wait $job || true
    done
  fi
}

# bump_dep <repository> <component> <branch>
bump_dep() {
  repository="$1"
  component="$2"
  branch="$3"

  # If component does not contain 'github.com', we assume it's a sf component to bump
  if [[ ! "$component" =~ ^github.com ]]; then
    component="github.com/streamingfast/$component"
  fi

  if [[ "$component" =~ !$ ]]; then
    component=`printf $component | sed 's/!//'`
  elif [[ ! "$component" =~ @ ]]; then
    component="$component@develop"
  fi

  echo "Bumping $repository to $component"
  cd $repository

  set -e
  run git checkout $branch
  run git pull
  run go get $component
  set +e

  run git diff --exit-code
  if [[ $? != 0 ]]; then
    run git commit -a -m "'Bumped $component'"

    if [[ $build == "true" ]]; then
      run git push
    fi
    return 0
  else
    run echo "Repository up to date, nothing to do"
    return 1
  fi
}

# build_component <name> <branch>
build_component() {
  name="$1"
  branch="$2"

  set -e
  cd "$SF_WORKFLOWS_DIR"
  jsonnet_file="$name.jsonnet"
  if [[ ! -f $jsonnet_file ]]; then
    echo "Unable to find file '$jsonnet_file' in folder workflows dir ($SF_WORKFLOWS_DIR), skipping"
    return 0
  fi

  building="true"
  echo "Submitting $name.jsonnet (with branch='$branch')"
  run_job ./submit $name.jsonnet -p "branch=$branch"

  # if [[ $? != 0 ]]; then
  #   echo "Build failed"
  #   exit 1
  # fi

  # status=`cmd ./status $name`
  # if [[ "$status" == "Failed" ]]; then
  #   echo "Build failed"

  #   echo ""
  #   echo "Showing logs output..."
  #   ./logs $name
  #   exit 1
  # fi
  set +e
}

# checkout_branch <repository> <branch>
checkout_branch() {
  repository="$1"
  branch="$2"

  echo "Checking out branch $branch on $repository"
  cd $repository

  if ! git show-ref --verify --quiet "refs/heads/$branch"; then
    set -e
    git checkout -b "$branch"
    git push origin -u "$branch"
    set +e
  fi
}

# repository_branch <repository>
repository_branch() {
  repository="$1"

  set -e
  cd $repository
  git rev-parse --abbrev-ref HEAD
  set +e
}

run() {
  if [[ $dry_run == "true" ]]; then
    echo "Would run '$*'"
    return 0
  fi

  eval $@
}

run_job() {
  if [[ $dry_run == "true" ]]; then
    echo "Would run job '$*'"
    return 0
  fi

  eval $@ &
}

usage_error() {
  message="$1"
  exit_code="$2"

  echo "ERROR: $message"
  echo ""
  usage
  exit ${exit_code:-1}
}

usage() {
  echo "usage: bump-sf-for [-n] [-b] [-f] <eosio|ethereum|solana> [<component>]"
  echo ""
  echo "Bump and potentially build the sf-<chain> and sf-<chain>-priv automatically when bumping."
  echo "If the <component> parameter is empty, only sf-<chain>-priv is bumped."
  echo ""
  echo "Components are not built unless the '-b' flag is used"
  echo ""
  echo "Flags"
  echo "      -n       Perform a dry-run, don't run any command"
  echo "      -b       Push and run a build of updated component"
  echo "      -c       Check out a corresponding branch in priv repository if not develop"
  echo "      -f       Force a build even if repository is up to date"
}

main $@