#!/usr/bin/env bash

raw=
insecure=
plaintext=

main() {
  while getopts "hipr" opt; do
    case $opt in
      h) usage && exit 0;;
      i) insecure="-insecure";;
      p) plaintext="-plaintext";;
      r) raw=true;;
      \?) usage_error "Invalid option: -$OPTARG";;
    esac
  done
  shift $((OPTIND-1))

  endpoint="$1"
  if [[ $endpoint == "" ]]; then
    usage_error "parameter <endpoint> is required"
  fi

  file="$2"
  if [[ $file == "" ]]; then
    usage_error "parameter <file> is required"
  fi

  if [[ ! -f $file ]]; then
    usage_error "file '$file' does not exist"
  fi

  content=`cat "$file" | tr -d '\n' | sed 's/"/\\\\"/g'`
  query="{\"query\":\"$content\"}"
  if [[ $3 != "" ]]; then
    variables=`printf "$3" | tr -d '\n'`
    query="{\"query\":\"$content\",\"variables\":$variables}"
  fi

  if [[ ! "$endpoint" =~ ^[^:]+:[0-9]{2,}$ ]]; then
    endpoint="${endpoint}:443"
  fi

  if [[ $raw == true ]]; then
    exec grpcurl $plaintext $insecure -H "Authorization: Bearer $DFUSE_API_TOKEN" -d "$query" "$endpoint" dfuse.graphql.v1.GraphQL/Execute
  else
    result=`grpcurl $plaintext $insecure -H "Authorization: Bearer $DFUSE_API_TOKEN" -d "$query" "$endpoint" dfuse.graphql.v1.GraphQL/Execute`
    exit_code=$?
    if [[ $exit_code != 0 ]]; then
      printf "$result"
      exit $exit_code
    fi

    data=`echo "$result" | jq -r .data 2>&1`
    if [[ $? != 0 ]]; then
      printf "$result"
      exit 0
    fi

    if [[ -n "$data" && "$data" != "null" ]]; then
      echo "$data"
    else
      printf "$result"
    fi
  fi
}

usage_error() {
  message="$1"
  exit_code="$2"

  echo "ERROR: $message"
  echo ""
  usage
  exit ${exit_code:-1}
}

usage() {
  echo "usage: dgrpc [-i] [-r] <endpoint> <file> [<variables>]"
  echo ""
  echo "Query/stream dfuse GraphQL over gRPC interface at given <endpoint> using the following"
  echo "<file> and <variables> (if present)."
  echo ""
  echo "The scripts expect that DFUSE_API_TOKEN environment variable is set to a valid dfuse API"
  echo "token value."
  echo ""
  echo "The script reads the file in argument, must be a valid GraphQL document, turns it into"
  echo "a proper GraphQL over gRPC query, add to this query object the <variables> argument (as-is,"
  echo "no transformation is done, so it must be valid JSON) and send the query to the server".
  echo ""
  echo "If the response has '.data' field, the script extracts the content from it and returns"
  echo "it as valid JSON to the caller. Otherwise, the response is returned as-is if the '.data'"
  echo "field cannot be determined."
  echo ""
  echo "If the '-r' (raw) option, the output of 'grpcurl' is returned without any transformation"
  echo "like described above. Currently, it's required to use this for stream that are never"
  echo "ending (or to get immediate feedback of a longer to complete stream)."
  echo ""
  echo "Options"
  echo "    -i          Insecure gRPC connection when connecting to a local endpoint"
  echo "    -p          Plain-text gRPC connection (i.e. no TLS) when connecting to a local endpoint"
  echo "    -r          Do not perform any transformation on grpcurl output and return it as-is, **required*"
  echo "                for a never ending stream output"
  echo "    -h          Display help about this script"
  echo ""
  echo "Requirements"
  echo " - grpcurl"
  echo " - jq"
}

main "$@"