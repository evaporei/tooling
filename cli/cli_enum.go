// Code generated by go-enum
// DO NOT EDIT!

package cli

import (
	"fmt"
	"strings"
)

const (
	// DateLikeHintNone is a DateLikeHint of type None.
	DateLikeHintNone DateLikeHint = iota
	// DateLikeHintUnixSeconds is a DateLikeHint of type UnixSeconds.
	DateLikeHintUnixSeconds
	// DateLikeHintUnixMilliseconds is a DateLikeHint of type UnixMilliseconds.
	DateLikeHintUnixMilliseconds
)

const _DateLikeHintName = "NoneUnixSecondsUnixMilliseconds"

var _DateLikeHintNames = []string{
	_DateLikeHintName[0:4],
	_DateLikeHintName[4:15],
	_DateLikeHintName[15:31],
}

// DateLikeHintNames returns a list of possible string values of DateLikeHint.
func DateLikeHintNames() []string {
	tmp := make([]string, len(_DateLikeHintNames))
	copy(tmp, _DateLikeHintNames)
	return tmp
}

var _DateLikeHintMap = map[DateLikeHint]string{
	0: _DateLikeHintName[0:4],
	1: _DateLikeHintName[4:15],
	2: _DateLikeHintName[15:31],
}

// String implements the Stringer interface.
func (x DateLikeHint) String() string {
	if str, ok := _DateLikeHintMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DateLikeHint(%d)", x)
}

var _DateLikeHintValue = map[string]DateLikeHint{
	_DateLikeHintName[0:4]:   0,
	_DateLikeHintName[4:15]:  1,
	_DateLikeHintName[15:31]: 2,
}

// ParseDateLikeHint attempts to convert a string to a DateLikeHint
func ParseDateLikeHint(name string) (DateLikeHint, error) {
	if x, ok := _DateLikeHintValue[name]; ok {
		return x, nil
	}
	return DateLikeHint(0), fmt.Errorf("%s is not a valid DateLikeHint, try [%s]", name, strings.Join(_DateLikeHintNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DateLikeHint) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DateLikeHint) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDateLikeHint(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DateParsedFromLayout is a DateParsedFrom of type Layout.
	DateParsedFromLayout DateParsedFrom = iota
	// DateParsedFromTimestamp is a DateParsedFrom of type Timestamp.
	DateParsedFromTimestamp
)

const _DateParsedFromName = "LayoutTimestamp"

var _DateParsedFromNames = []string{
	_DateParsedFromName[0:6],
	_DateParsedFromName[6:15],
}

// DateParsedFromNames returns a list of possible string values of DateParsedFrom.
func DateParsedFromNames() []string {
	tmp := make([]string, len(_DateParsedFromNames))
	copy(tmp, _DateParsedFromNames)
	return tmp
}

var _DateParsedFromMap = map[DateParsedFrom]string{
	0: _DateParsedFromName[0:6],
	1: _DateParsedFromName[6:15],
}

// String implements the Stringer interface.
func (x DateParsedFrom) String() string {
	if str, ok := _DateParsedFromMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DateParsedFrom(%d)", x)
}

var _DateParsedFromValue = map[string]DateParsedFrom{
	_DateParsedFromName[0:6]:  0,
	_DateParsedFromName[6:15]: 1,
}

// ParseDateParsedFrom attempts to convert a string to a DateParsedFrom
func ParseDateParsedFrom(name string) (DateParsedFrom, error) {
	if x, ok := _DateParsedFromValue[name]; ok {
		return x, nil
	}
	return DateParsedFrom(0), fmt.Errorf("%s is not a valid DateParsedFrom, try [%s]", name, strings.Join(_DateParsedFromNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DateParsedFrom) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DateParsedFrom) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDateParsedFrom(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
